# -*- coding: utf-8 -*-
"""diy-project_library.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WkvNLe22jW9RXwvKx7RFtfa6Qob1lhns
"""

import math
import matplotlib as mpl
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d
import random
import numpy as np

# ellipsoid equation

def ellipsoid(x, y, z, a, b, c):
    return x**2/a**2 + y**2/b**2 + z**2/c**2 - 1

# monte carlo using importance sampling

def monte_carlo(N, a, b, c):
    xr = []
    yr = []
    zr = []
    hits = 0
    for i in range(N):
        xr.append(random.uniform(-a, a))
        yr.append(random.uniform(-b, b))
        zr.append(random.uniform(-c, c))

        if ellipsoid(xr[i], yr[i], zr[i], a, b, c) <= 0:
            hits += 1

    estimated_volume = hits/N * a * b * c * 8
    return estimated_volume, N

# returns list of estimated volumes as a function of N

def list_volumes(steps, a, b, c):
    vol_list = []
    for n in steps:
        vol, n = monte_carlo(n, a, b, c)
        vol_list.append(vol)

    return vol_list, steps

# returns points to cover ellipsoid volume

def ellipsoid_volume(N, a, b, c):
    # random points within cuboidal enclosure
    xr = []
    yr = []
    zr = []
    # hit points (within the ellipsoid volume)
    xv = []
    yv = []
    zv = []
    for i in range(N):
        xr.append(random.uniform(-a, a))
        yr.append(random.uniform(-b, b))
        zr.append(random.uniform(-c, c))

        if ellipsoid(xr[i], yr[i], zr[i], a, b, c) <= 0:
            xv.append(xr[i])
            yv.append(yr[i])
            zv.append(zr[i])

    return xv, yv, zv

# returns fractional error as a function of N

def frac_error(steps, a, b, c):
    error = [] 
    for n in steps:
        vol, n = monte_carlo(n, a, b, c)
        error.append((vol-141.37167)/141.37167)

    return error, steps