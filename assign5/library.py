# -*- coding: utf-8 -*-
"""library.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-FR_HskE-xHuj28-s3g1rUA8Wv2nSTi1
"""

# Midpoint Integration Scheme

def midpoint(f, a, b, n):
    h = (b-a)/n
    integ = 0
    x = a + h/2
    for i in range(n):
        integ += h*f(x)
        x += h
    return integ

# Trapezoidal Integration Scheme

def trapezoidal(f, a, b, n):
    h = (b-a)/n
    integ = 0
    x = a
    for i in range(n):
        integ += f(x) + f(x+h)
        x += h
    return integ*h/2

# Simpson Integration Scheme

def simpson(f, a, b, n):
    if n%2 == 1:
        n = n+1
    x = a
    sum = f(a)
    h = (b-a)/n
    for i in range(1, n):
        if i%2 == 0:
            w = 2
        elif i%2 == 1:
            w = 4
        elif i == n:
            w = 1
        sum += w*f(x)
        x += h
    return (h/3)*sum

# LCG RNG

a = 1103515245
c = 12345
m = 32768.
def myrand(x):  # LCG
	return ((a * x + c) % m) / m

# Monte Carlo Integration

def monte_carlo(f, a, b, n):
    seed = 1
    sum = 0
    for i in range(n):
        r = myrand(seed)
        x = a + (b-a)*r
        sum += f(x)
        seed += r
    integ = ((b-a)*sum)/n
    return integ